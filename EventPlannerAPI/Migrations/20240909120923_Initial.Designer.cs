// <auto-generated />
using System;
using EventPlannerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventPlannerAPI.Migrations
{
    [DbContext(typeof(EventPlannerDbContext))]
    [Migration("20240909120923_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventPlannerAPI.Models.Catering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Caterings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Fine dining experience.",
                            Contact = "info@gourmetfeast.com",
                            Location = "City Center",
                            MenuDetails = "Includes a five-course meal.",
                            Name = "Gourmet Feast",
                            Price = 500.00m,
                            Rating = 4.5m,
                            Tier = "Premium"
                        },
                        new
                        {
                            Id = 2,
                            About = "Casual and quick meals.",
                            Contact = "info@quickbites.com",
                            Location = "Downtown",
                            MenuDetails = "Buffet style meals with various options.",
                            Name = "Quick Bites",
                            Price = 200.00m,
                            Rating = 4.0m,
                            Tier = "Standard"
                        });
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Photography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Photographies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Professional wedding photography.",
                            Contact = "contact@capturemoments.com",
                            Location = "Uptown",
                            Name = "Capture Moments",
                            PackageDetails = "Full-day coverage with photo album.",
                            Price = 800.00m,
                            Rating = 4.8m,
                            Tier = "Premium"
                        },
                        new
                        {
                            Id = 2,
                            About = "High-quality event photography.",
                            Contact = "info@photomagic.com",
                            Location = "Suburbs",
                            Name = "Photo Magic",
                            PackageDetails = "Half-day coverage with digital files.",
                            Price = 600.00m,
                            Rating = 4.6m,
                            Tier = "Standard"
                        });
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CateringId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhotographyId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VenueId")
                        .HasColumnType("integer");

                    b.Property<int>("WeddingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CateringId");

                    b.HasIndex("PhotographyId");

                    b.HasIndex("VenueId");

                    b.HasIndex("WeddingId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Elegant ballroom for weddings.",
                            Address = "123 Main Street",
                            Capacity = 500,
                            Contact = "info@grandhall.com",
                            Location = "Main Street",
                            Name = "Grand Hall",
                            Price = 1500.00m,
                            Rating = 4.7m,
                            Tier = "Luxury"
                        },
                        new
                        {
                            Id = 2,
                            About = "Beautiful venue by the river.",
                            Address = "456 River Road",
                            Capacity = 300,
                            Contact = "info@riversidepavilion.com",
                            Location = "River Road",
                            Name = "Riverside Pavilion",
                            Price = 1200.00m,
                            Rating = 4.5m,
                            Tier = "Premium"
                        });
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Wedding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuestCount")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlannerId")
                        .HasColumnType("text");

                    b.Property<string>("PlannerUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Weddings");
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Service", b =>
                {
                    b.HasOne("EventPlannerAPI.Models.Catering", "Catering")
                        .WithMany()
                        .HasForeignKey("CateringId");

                    b.HasOne("EventPlannerAPI.Models.Photography", "Photography")
                        .WithMany()
                        .HasForeignKey("PhotographyId");

                    b.HasOne("EventPlannerAPI.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");

                    b.HasOne("EventPlannerAPI.Models.Wedding", "Wedding")
                        .WithMany("Services")
                        .HasForeignKey("WeddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catering");

                    b.Navigation("Photography");

                    b.Navigation("Venue");

                    b.Navigation("Wedding");
                });

            modelBuilder.Entity("EventPlannerAPI.Models.Wedding", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
